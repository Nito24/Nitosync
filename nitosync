#!/bin/sh


#NITOSYNC
#Nito 2024

sshport=22
configpath=$HOME'/.config/nitosync'
configfile='config'


configuration(){
    if test -f ${configpath}/${configfile} ; then
        . ${configpath}/${configfile}
    else
        echo 'No config file found'
    fi
}

configuration



bisync(){
    echo 'Connection established succesffully with remote ('$remote')'
    #notify-send Syncronization 'Succesffully connected with remote server' --app-name=' NitoSync'
    #down up
    rsync -azbu --backup-dir=backups/ --exclude=backups $user@$remote:"$remotepath" "$savepath" -e 'ssh -p '$sshport' -o ConnectTimeout=1' && ( rsync -azbu --backup-dir=backups/ --exclude=backups "$savepath" $user@$remote:"$remotepath" -e 'ssh -p '$sshport' -o ConnectTimeout=1' && echo 'Succesfully synced files (bidirectionally) ('$remote' -c '$configfile')' && notify-send Syncronization 'Succesfully synced files bidirectionally ('$remote' -c '$configfile')' --app-name=' NitoSync' )
}

uploadsync(){
    echo 'Connection established succesfully with remote ('$remote')'
    #notify-send Syncronization 'Succesffully connected with remote server' --app-name=' NitoSync'
    #up
    rsync -azbu --backup-dir=backups/ --exclude=backups "$savepath" $user@$remote:"$remotepath" -e 'ssh -p '$sshport' -o ConnectTimeout=1' &&  echo 'Succesfully uploaded files to remote server ('$remote' -c '$configfile')' && notify-send Syncronization 'Succesfully uploaded/synced files ('$remote' -c '$configfile')' --app-name=' NitoSync'
}

noserver(){
    echo 'Error: Cant reach remote server ('$remote')'
    notify-send Syncronization 'Couldnt reach remote server' --app-name=' NitoSync' -u critical
}

badport(){
    echo 'Error: Remote server connection ('$remote') was succesfull but port ('$sshport') didnt work.'
    notify-send Syncronization 'Couldnt reach remote server (badport: '$sshport')' --app-name=' NitoSync' -u critical
}

fullsync(){
    echo "Performing full syncronization (using all directories listed in all config files)"
    if ping -c 1 $remote &> /dev/null
    then
        for entry in "$configpath"/*
        do
            echo "$entry"
            configfile=$(grep -o '[^/]*$' <<< $entry)
            . $entry
            bisync || badport
        done
        echo 'Ended full sync process'
    else
        noserver
    fi
    exit
}

#VERY IMPORTANT TO SET PATHS CORRECTLY -> END THEM WITH / -> /MY/PATH/
#                                                                   ---

Help(){
    # Display Help
    echo "Script for syncronicing saves (or any other file) before running a program and after closing it."
    echo
    echo "Syntax: scriptTemplate [-e|a|s|r|u|p|f|c|h]"
    echo
    echo "options:"
    echo "  -e           App to (e)xecute between syncs."
    echo "  -a           Extra commands to pass (a)fter execute app."
    echo "  -b           Extra commands 2 to pass (a)fter execute app."
    echo "  -s           Local (s)avepath to sync to/from."
    echo "  -r           (R)emote ip/address."
    echo "  -t           Port (t)o direct ssh connection."
    echo "  -u           Remote (u)ser to login as."
    echo "  -p           Remote (p)ath to sync to/from."
    echo "  -f           Execute a (f)ull sync, will sync all the directories in the config files."
    echo "  -c           Specific (c)onfig file to use (name; must be located in ~/.config/nitosync/)."
    echo "  -h           Print this (h)elp dialog."
    echo
    exit
}


while getopts s:r:t:u:p:e:a:b:c::hf flag
do
    case "${flag}" in
        s) savepath=${OPTARG};;
        r) remote=${OPTARG};;
        t) sshport=${OPTARG};;
        u) user=${OPTARG};;
        p) remotepath=${OPTARG};;
        e) emulator=${OPTARG};;
        a) after=${OPTARG};;
        b) after2=${OPTARG};;
        f) fullsync;;
        c) configfile=${OPTARG}
           configuration;;
        h) Help;;
    esac
done



#START SCRIPT SYNC (bidirectional)
echo 'Starting intitial sync (bidirectional)'
#notify-send Syncronization 'NitoSync is running now' --app-name=' NitoSync'
if ping -c 1 $remote &> /dev/null
then
    bisync || badport
else
    noserver
fi
echo 'Ended start sync process'
echo


echo $emulator $after
$emulator $after "$after2" &> /dev/null




#END SCRIPT SYNC (only upload)
echo
echo 'Starting final sync'
if ping -c 1 $remote &> /dev/null
then
    uploadsync || badport
else
    noserver
fi
echo 'Ended end sync process'
echo

